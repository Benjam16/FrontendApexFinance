{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport { TAX_OFFICE_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nfunction useApproveTaxOffice() {\n  const tombFinance = useTombFinance();\n  let token = tombFinance.TOMB; // if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  // else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  // else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n\n  const pendingApproval = useHasPendingApproval(token.address, TAX_OFFICE_ADDR);\n  const currentAllowance = useAllowance(token, TAX_OFFICE_ADDR, pendingApproval); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN; // amountToApprove will be defined if currentAllowance is\n\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(TAX_OFFICE_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: TAX_OFFICE_ADDR\n      }\n    });\n  }, [approvalState, token, addTransaction]);\n  return [approvalState, approve];\n}\n\nexport default useApproveTaxOffice;","map":{"version":3,"sources":["/Users/eduarddriessen/Documents/GitHub/apx/src/hooks/useApproveTaxOffice.ts"],"names":["BigNumber","ethers","useCallback","useMemo","useHasPendingApproval","useTransactionAdder","useAllowance","TAX_OFFICE_ADDR","useTombFinance","APPROVE_AMOUNT","constants","MaxUint256","APPROVE_BASE_AMOUNT","from","ApprovalState","useApproveTaxOffice","tombFinance","token","TOMB","pendingApproval","address","currentAllowance","approvalState","FTM","APPROVED","UNKNOWN","lt","PENDING","NOT_APPROVED","addTransaction","approve","console","error","response","summary","symbol","approval","tokenAddress","spender"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,QAAlC;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,6BAA3D;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,cAAc,GAAGR,MAAM,CAACS,SAAP,CAAiBC,UAAxC;AACA,MAAMC,mBAAmB,GAAGZ,SAAS,CAACa,IAAV,CAAe,2BAAf,CAA5B;AAEA,WAAYC,aAAZ,C,CAOA;;WAPYA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;;AAQZ,SAASC,mBAAT,GAAqE;AACnE,QAAMC,WAAW,GAAGR,cAAc,EAAlC;AACA,MAAIS,KAAY,GAAGD,WAAW,CAACE,IAA/B,CAFmE,CAGnE;AACA;AACA;;AACA,QAAMC,eAAe,GAAGf,qBAAqB,CAACa,KAAK,CAACG,OAAP,EAAgBb,eAAhB,CAA7C;AACA,QAAMc,gBAAgB,GAAGf,YAAY,CAACW,KAAD,EAAQV,eAAR,EAAyBY,eAAzB,CAArC,CAPmE,CASnE;;AACA,QAAMG,aAA4B,GAAGnB,OAAO,CAAC,MAAM;AACjD;AACA,QAAIc,KAAK,KAAKD,WAAW,CAACO,GAA1B,EAA+B,OAAOT,aAAa,CAACU,QAArB;AAC/B,QAAI,CAACH,gBAAL,EAAuB,OAAOP,aAAa,CAACW,OAArB,CAH0B,CAKjD;;AACA,WAAOJ,gBAAgB,CAACK,EAAjB,CAAoBd,mBAApB,IACHO,eAAe,GACbL,aAAa,CAACa,OADD,GAEbb,aAAa,CAACc,YAHb,GAIHd,aAAa,CAACU,QAJlB;AAKD,GAX2C,EAWzC,CAACH,gBAAD,EAAmBF,eAAnB,EAAoCF,KAApC,EAA2CD,WAA3C,CAXyC,CAA5C;AAaA,QAAMa,cAAc,GAAGxB,mBAAmB,EAA1C;AAEA,QAAMyB,OAAO,GAAG5B,WAAW,CAAC,YAA2B;AACrD,QAAIoB,aAAa,KAAKR,aAAa,CAACc,YAApC,EAAkD;AAChDG,MAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd;AACA;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACa,OAAN,CAAcvB,eAAd,EAA+BE,cAA/B,CAAvB;AACAoB,IAAAA,cAAc,CAACI,QAAD,EAAW;AACvBC,MAAAA,OAAO,EAAG,WAAUjB,KAAK,CAACkB,MAAO,EADV;AAEvBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,YAAY,EAAEpB,KAAK,CAACG,OADZ;AAERkB,QAAAA,OAAO,EAAE/B;AAFD;AAFa,KAAX,CAAd;AAOD,GAd0B,EAcxB,CAACe,aAAD,EAAgBL,KAAhB,EAAuBY,cAAvB,CAdwB,CAA3B;AAgBA,SAAO,CAACP,aAAD,EAAgBQ,OAAhB,CAAP;AACD;;AAED,eAAef,mBAAf","sourcesContent":["import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\nimport { TAX_OFFICE_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveTaxOffice(): [ApprovalState, () => Promise<void>] {\n  const tombFinance = useTombFinance();\n  let token: ERC20 = tombFinance.TOMB;\n  // if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  // else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  // else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n  const pendingApproval = useHasPendingApproval(token.address, TAX_OFFICE_ADDR);\n  const currentAllowance = useAllowance(token, TAX_OFFICE_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(TAX_OFFICE_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: TAX_OFFICE_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveTaxOffice;\n"]},"metadata":{},"sourceType":"module"}